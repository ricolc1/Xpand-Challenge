package com.xpand.challenge.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;

import com.xpand.challenge.dto.ActorDTO;
import com.xpand.challenge.dto.IdentifiableActorDTO;
import com.xpand.challenge.enums.Gender;

@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
class ActorControllerTests {

	@LocalServerPort
	private int port;

	@Autowired
	private TestRestTemplate restTemplate;
	
	private String path(int port) {
		return "http://localhost:" + port + "/actors";
	}
	
	private ActorDTO mockActor = new ActorDTO("Mock Actor", LocalDate.now(), Gender.FEMALE);

	@Test
	void doTestGetActors() {
		assertEquals(HttpStatus.OK.value(), restTemplate.getForEntity(path(port), List.class).getStatusCodeValue());
	}

	@Test
	void doTestGetActor() {
		ResponseEntity<IdentifiableActorDTO> response = restTemplate.getForEntity(path(port) + "/1", IdentifiableActorDTO.class);
		assertEquals(HttpStatus.OK.value(), response.getStatusCode().value());
		assertEquals(1, response.getBody().getId());
	}

	@Test
	void doTestGetActorNotFound() {
		ResponseEntity<IdentifiableActorDTO> response = restTemplate.getForEntity(path(port) + "/125", IdentifiableActorDTO.class);
		assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatusCode().value());
	}

	@Test
	void doTestUpdateActor() {
		HttpEntity<ActorDTO> putRequest = new HttpEntity<>(mockActor);
		ResponseEntity<?> putResponse = restTemplate.exchange(path(port) + "/1", HttpMethod.PUT, putRequest, Void.class);
		assertEquals(HttpStatus.NO_CONTENT.value(), putResponse.getStatusCode().value());
		ResponseEntity<IdentifiableActorDTO> getResponse = restTemplate.getForEntity(path(port) + "/1", IdentifiableActorDTO.class);
		assertEquals(HttpStatus.OK.value(), getResponse.getStatusCode().value());
		assertEquals("Mock Actor", getResponse.getBody().getName());
	}

	@Test
	void doTestUpdateActorBadRequest() {
		ActorDTO invalidmockActor = mockActor;
		invalidmockActor.setGender(null);
		HttpEntity<ActorDTO> putRequest = new HttpEntity<>(invalidmockActor);
		ResponseEntity<?> putResponse = restTemplate.exchange(path(port) + "/1", HttpMethod.PUT, putRequest, Void.class);
		assertEquals(HttpStatus.BAD_REQUEST.value(), putResponse.getStatusCode().value());
	}

	@Test
	void doTestDeleteActor() {
		ResponseEntity<?> response = restTemplate.exchange(path(port) + "/1", HttpMethod.DELETE, null, Void.class);
		assertEquals(HttpStatus.NO_CONTENT.value(), response.getStatusCode().value());
		assertEquals(HttpStatus.NOT_FOUND.value(), restTemplate.getForEntity(path(port) + "/1", IdentifiableActorDTO.class).getStatusCode().value());
	}
}
